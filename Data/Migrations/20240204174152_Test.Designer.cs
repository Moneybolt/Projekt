// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240204174152_Test")]
    partial class Test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("Data.Entities.OrganizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nip")
                        .HasColumnType("TEXT");

                    b.Property<string>("Regon")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Organization");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Nip = "123123",
                            Regon = "14124",
                            Title = "Test"
                        },
                        new
                        {
                            Id = 102,
                            Nip = "12431",
                            Regon = "12412f",
                            Title = "Testowy"
                        });
                });

            modelBuilder.Entity("TravelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("End_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("End_Place")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guide")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Participants")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Start_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Start_Place")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("travel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            End_Date = "2018-07-11",
                            End_Place = "Praga",
                            Guide = "Szymon",
                            Name = "Test",
                            OrganizationId = 101,
                            Participants = 27,
                            Start_Date = "2014-12-12",
                            Start_Place = "Kraków"
                        },
                        new
                        {
                            Id = 2,
                            Guide = "Jarosław",
                            Name = "Nazwa",
                            OrganizationId = 102,
                            Participants = 49
                        });
                });

            modelBuilder.Entity("Data.Entities.OrganizationEntity", b =>
                {
                    b.OwnsOne("Data.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OrganizationEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("OrganizationEntityId");

                            b1.ToTable("Organization");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationEntityId");

                            b1.HasData(
                                new
                                {
                                    OrganizationEntityId = 101,
                                    City = "Kraków",
                                    PostalCode = "31-150",
                                    Street = "Św.Filipa 17"
                                },
                                new
                                {
                                    OrganizationEntityId = 102,
                                    City = "Rzeszów",
                                    PostalCode = "39-200",
                                    Street = "Hetmańska 12"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TravelEntity", b =>
                {
                    b.HasOne("Data.Entities.OrganizationEntity", "Organization")
                        .WithMany("Travel")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Data.Entities.OrganizationEntity", b =>
                {
                    b.Navigation("Travel");
                });
#pragma warning restore 612, 618
        }
    }
}
